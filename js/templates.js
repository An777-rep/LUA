
let templates = [];
let currentTemplateIndex = -1;

async function loadTemplates() {
  const res = await fetch("data/templates.json");
  templates = await res.json();
  buildTemplateUI();
}

function buildTemplateUI() {
  const sel = document.createElement("select");
  sel.id = "templateSelector";
  sel.onchange = () => loadTemplate(sel.value);
  templates.forEach((t, i) => {
    const opt = document.createElement("option");
    opt.value = i;
    opt.textContent = t.title;
    sel.appendChild(opt);
  });

  const editBtn = document.createElement("button");
  editBtn.textContent = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å";
  editBtn.onclick = editCurrentTemplate;

  const exportBtn = document.createElement("button");
  exportBtn.textContent = "üì§ –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤";
  exportBtn.onclick = exportTemplates;

  const importInput = document.createElement("input");
  importInput.type = "file";
  importInput.accept = ".json";
  importInput.onchange = importTemplates;

  document.body.prepend(importInput);
  document.body.prepend(exportBtn);
  document.body.prepend(editBtn);
  document.body.prepend(sel);
}

function loadTemplate(index) {
  currentTemplateIndex = index;
  const tmpl = templates[index];
  document.getElementById("input").value = tmpl.steps.join(", ");
}

function editCurrentTemplate() {
  if (currentTemplateIndex === -1) return alert("–®–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω");
  const newSteps = prompt("–†–µ–¥–∞–∫—Ç–∏—Ä—É–π —à–∞–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", templates[currentTemplateIndex].steps.join(", "));
  if (!newSteps) return;
  templates[currentTemplateIndex].steps = newSteps.split(",").map(x => x.trim());
  alert("–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ø–∞–º—è—Ç–∏. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π —à–∞–±–ª–æ–Ω—ã.");
}

function exportTemplates() {
  const blob = new Blob([JSON.stringify(templates, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "templates.json";
  a.click();
  URL.revokeObjectURL(url);
}

function importTemplates(event) {
  const file = event.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = () => {
    try {
      templates = JSON.parse(reader.result);
      alert("–ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.");
      location.reload();
    } catch (e) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —à–∞–±–ª–æ–Ω–æ–≤: " + e);
    }
  };
  reader.readAsText(file);
}
