
function parseComplexCommand(input) {
    const lines = [];
    let valMatch = input.match(/–Ω–∞–π–¥–∏.*?(\d+(\.\d+)?)/);
    if (valMatch) {
        const val = valMatch[1];
        const type = input.includes("float") ? "gg.TYPE_FLOAT" : "gg.TYPE_DWORD";
        const region = input.includes("–∞–Ω–æ–Ω–∏–º") ? "gg.REGION_ANONYMOUS" : "gg.REGION_C_ALLOC";
        lines.push(GG_FUNCTIONS["–ø–æ–∏—Å–∫"](val, type, region));
    }

    if (input.includes("–∑–∞–º–µ–Ω–∏") && input.match(/–Ω–∞\s+(\d+)/)) {
        const val2 = input.match(/–Ω–∞\s+(\d+)/)[1];
        lines.push(GG_FUNCTIONS["–∑–∞–º–µ–Ω–∏"](val2));
    }

    if (input.includes("—Å–º–µ—â–µ–Ω") && input.match(/–Ω–∞\s+(\d+)/)) {
        const offset = input.match(/–Ω–∞\s+(\d+)/)[1];
        lines.push(GG_FUNCTIONS["—Å–º–µ—â–µ–Ω–∏–µ"](offset));
    }

    if (input.includes("–µ—â—ë") || input.includes("–¥–∞–ª—å—à–µ") || input.includes("–ø–æ–≤—Ç–æ—Ä–Ω–æ") || input.includes("–µ—â—ë —Ä–∞–∑")) {
        lines.push("-- üí° –£—Ç–æ—á–Ω–∏ —à–∞–≥, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ");
    }

    if (input.includes("—Ç–æ—Å—Ç") || input.includes("–≥–æ—Ç–æ–≤–æ")) {
        lines.push(GG_FUNCTIONS["toast"]("–ì–æ—Ç–æ–≤–æ"));
    }

    return lines.join("\n");
}
